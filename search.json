[{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to yfR","title":"Contributing to yfR","text":"First, thanks interest package apraisal contributing codebase `yfR. academic, R projects official funding. always nice community helping maintaing code. main links contributing:","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to yfR","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"how-you-can-contribute","dir":"","previous_headings":"","what":"How you can contribute","title":"Contributing to yfR","text":"several ways can contribute project. want know contribute open source projects like one, see Open Source Guide.","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"share-the-love-Ô∏è","dir":"","previous_headings":"How you can contribute","what":"Share the love ‚ù§Ô∏è","title":"Contributing to yfR","text":"Think our_package useful? Let others discover , telling person, via Twitter blog post. Using our_package paper writing? Consider citing .","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"report-a-bug-","dir":"","previous_headings":"How you can contribute","what":"Report a bug üêõ","title":"Contributing to yfR","text":"‚Äôve found bug using package, please report creating issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g.¬†Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"improve-the-documentation-","dir":"","previous_headings":"How you can contribute","what":"Improve the documentation üìñ","title":"Contributing to yfR","text":"Noticed typo website? Think function use better example? Good documentation makes difference, help improve welcome!","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"the-website","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"The website","title":"Contributing to yfR","text":"website generated pkgdown. means don‚Äôt write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"function-documentation","dir":"","previous_headings":"How you can contribute > Improve the documentation üìñ","what":"Function documentation","title":"Contributing to yfR","text":"Functions described comments near code translated documentation using roxygen2. want improve function description: Go R/ directory code repository. Look file name function. Propose file change update function documentation roxygen comments (starting #').","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"contribute-code-","dir":"","previous_headings":"How you can contribute","what":"Contribute code üìù","title":"Contributing to yfR","text":"Care fix bugs implement new functionality our_package? Awesome! üëè look issue list leave comment things want work . See also development guidelines .","code":""},{"path":"https://docs.ropensci.org/yfR/Contributing.html","id":"development-guidelines","dir":"","previous_headings":"","what":"Development guidelines","title":"Contributing to yfR","text":"try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"https://docs.ropensci.org/yfR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 yfR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://docs.ropensci.org/yfR/articles/diff-batchgetsymbols.html","id":"differences-from-batchgetsymbols","dir":"Articles","previous_headings":"","what":"Differences from BatchGetSymbols","title":"yfR and BatchGetSymbols","text":"Package BatchgetSymbols developed back 2016, many bad structural choices part. Since , learned R ecosystem, resulting better maintainable code. However, impossible keep compatibility changes wanted make, decided develop new (fresh) package. main differences yfR (new) BatchGetSymbols (old): input arguments now formatted ‚Äúsnake_case‚Äù ‚Äúdot.case‚Äù. example, argument first date data importation yfR::yf_get() first_date, first.date, used BatchGetSymbols::BatchGetSymbols. new feature called ‚Äúcollection‚Äù, allows easy download collection tickers. example, can download price data components SP500 simply calling yfR::yf_collection_get(\"SP500\"). function renamed common API notation. example, BatchGetSymbols::BatchGetSymbols now yfR::yf_get(). Likewise, function fetching collections yfR::yf_collection_get(). output yfR::yf_get() always tibble price data (list BatchGetSymbols::BatchGetSymbols). one wants tibble summary importing process, available attribute output (see function base::attributes) New prettier status messages using package cli","code":""},{"path":"https://docs.ropensci.org/yfR/articles/getting-started.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Getting Started","text":"‚Äôll find series example calls yf_get(). arguments self-explanatory, can find details help files. steps algorithm : check cache files existing data cache, fetch stock prices YF clean raw data write cache file available calculate returns build diagnostics return data user","code":""},{"path":"https://docs.ropensci.org/yfR/articles/getting-started.html","id":"fetching-a-single-stock-price","dir":"Articles","previous_headings":"Examples","what":"Fetching a single stock price","title":"Getting Started","text":"","code":"library(yfR)  # set options for algorithm my_ticker <- 'GM' first_date <- Sys.Date() - 30 last_date <- Sys.Date()  # fetch data df_yf <- yf_get(tickers = my_ticker,                  first_date = first_date,                 last_date = last_date)  # output is a tibble with data head(df_yf) ## # A tibble: 6 √ó 11 ##   ticker ref_date   price_open price_high price_low price_close   volume ##   <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>    <dbl> ## 1 GM     2024-02-20       38.3       39.2      38.1        39.0 16971300 ## 2 GM     2024-02-21       39.0       39.8      39.0        39.5 15987800 ## 3 GM     2024-02-22       39.5       39.8      39.2        39.3 11458100 ## 4 GM     2024-02-23       39.4       40.0      39.3        39.6 15194400 ## 5 GM     2024-02-26       39.6       40.7      39.6        39.8 16610200 ## 6 GM     2024-02-27       40.2       40.6      39.8        40.2 11507700 ## # ‚Ñπ 4 more variables: price_adjusted <dbl>, ret_adjusted_prices <dbl>, ## #   ret_closing_prices <dbl>, cumret_adjusted_prices <dbl>"},{"path":"https://docs.ropensci.org/yfR/articles/getting-started.html","id":"fetching-many-stock-prices","dir":"Articles","previous_headings":"Examples","what":"Fetching many stock prices","title":"Getting Started","text":"","code":"library(yfR) library(ggplot2)  my_ticker <- c('TSLA', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                           first_date = first_date,                          last_date = last_date)   p <- ggplot(df_yf_multiple, aes(x = ref_date, y = price_adjusted,                                 color = ticker)) +    geom_line()  p"},{"path":"https://docs.ropensci.org/yfR/articles/getting-started.html","id":"fetching-dailyweeklymonthlyyearly-price-data","dir":"Articles","previous_headings":"Examples","what":"Fetching daily/weekly/monthly/yearly price data","title":"Getting Started","text":"","code":"library(yfR) library(ggplot2) library(dplyr)  my_ticker <- 'GE' first_date <- '2005-01-01' last_date <- Sys.Date()  df_dailly <- yf_get(tickers = my_ticker,                      first_date, last_date,                      freq_data = 'daily') %>%   mutate(freq = 'daily')  df_weekly <- yf_get(tickers = my_ticker,                      first_date, last_date,                      freq_data = 'weekly') %>%   mutate(freq = 'weekly')  df_monthly <- yf_get(tickers = my_ticker,                       first_date, last_date,                       freq_data = 'monthly') %>%   mutate(freq = 'monthly')  df_yearly <- yf_get(tickers = my_ticker,                      first_date, last_date,                      freq_data = 'yearly') %>%   mutate(freq = 'yearly')  # bind it all together for plotting df_allfreq <- bind_rows(   list(df_dailly, df_weekly, df_monthly, df_yearly) ) %>%   mutate(freq = factor(freq,                         levels = c('daily',                                    'weekly',                                   'monthly',                                   'yearly'))) # make sure the order in plot is right  p <- ggplot(df_allfreq, aes(x = ref_date, y = price_adjusted)) +    geom_line() +    facet_grid(freq ~ ticker) +    theme_minimal() +    labs(x = '', y = 'Adjusted Prices')  print(p)"},{"path":"https://docs.ropensci.org/yfR/articles/getting-started.html","id":"changing-format-to-wide","dir":"Articles","previous_headings":"Examples","what":"Changing format to wide","title":"Getting Started","text":"","code":"library(yfR) library(ggplot2)  my_ticker <- c('TSLA', 'GM', 'MMM') first_date <- Sys.Date() - 100 last_date <- Sys.Date()  df_yf_multiple <- yf_get(tickers = my_ticker,                           first_date = first_date,                          last_date = last_date)  print(df_yf_multiple) ## # A tibble: 204 √ó 11 ##    ticker ref_date   price_open price_high price_low price_close   volume ##  * <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>    <dbl> ##  1 GM     2023-12-12       33.5       33.9      33.4        33.4 22492100 ##  2 GM     2023-12-13       33.3       34.1      32.8        34.0 28807100 ##  3 GM     2023-12-14       34.6       36.3      34.5        36.2 35593100 ##  4 GM     2023-12-15       36.3       36.5      35.6        35.7 34153800 ##  5 GM     2023-12-18       35.8       36.2      35.4        35.4 18151800 ##  6 GM     2023-12-19       35.5       36.0      35.4        35.9 11875400 ##  7 GM     2023-12-20       35.7       36.4      35.5        35.5 16585400 ##  8 GM     2023-12-21       35.8       36.3      35.7        36.2 18421900 ##  9 GM     2023-12-22       36.1       36.6      35.8        36.0 15020900 ## 10 GM     2023-12-26       36.0       36.4      36.0        36.1 10733900 ## # ‚Ñπ 194 more rows ## # ‚Ñπ 4 more variables: price_adjusted <dbl>, ret_adjusted_prices <dbl>, ## #   ret_closing_prices <dbl>, cumret_adjusted_prices <dbl> l_wide <- yf_convert_to_wide(df_yf_multiple)  names(l_wide) ## [1] \"price_open\"             \"price_high\"             \"price_low\"              ## [4] \"price_close\"            \"volume\"                 \"price_adjusted\"         ## [7] \"ret_adjusted_prices\"    \"ret_closing_prices\"     \"cumret_adjusted_prices\" prices_wide <- l_wide$price_adjusted head(prices_wide) ## # A tibble: 6 √ó 4 ##   ref_date      GM   MMM  TSLA ##   <date>     <dbl> <dbl> <dbl> ## 1 2023-12-12  33.3  101.  237. ## 2 2023-12-13  33.9  102.  239. ## 3 2023-12-14  36.1  105.  251. ## 4 2023-12-15  35.6  105.  254. ## 5 2023-12-18  35.3  104.  252. ## 6 2023-12-19  35.8  105.  257."},{"path":"https://docs.ropensci.org/yfR/articles/using-collections.html","id":"fetching-collections-of-prices","dir":"Articles","previous_headings":"","what":"Fetching collections of prices","title":"Using Collections","text":"Collections just bundle tickers pre-organized package. example, collection SP500 represents current composition SP500 index. available collections : One can download composition collection yf_collection_get:","code":"available_collections <- yfR::yf_get_available_collections(   print_description = TRUE   ) ## ## ‚îÄ‚îÄ Description of Available Collections ‚îÄ‚îÄ ## ## ‚Ñπ SP500: The SP500 index (US MARKET) - Ticker = ^GSPC ## ‚Ñπ IBOV: The Ibovespa index (BR MARKET) - Ticker = ^BVSP ## ‚Ñπ FTSE: The FTSE index (UK MARKET) - Ticker = ^FTSE ## ‚Ñπ DOW: The DOW index (US MARKET) - Ticker = ^DJI ## ‚Ñπ testthat-collection: A (small) testing index for testthat() -- dev stuff, dont use it! available_collections ## [1] \"SP500\"               \"IBOV\"                \"FTSE\"                ## [4] \"DOW\"                 \"testthat-collection\" library(yfR)  # be patient, it takes a while df_yf <- yf_collection_get(\"SP500\")  head(df_yf)"},{"path":"https://docs.ropensci.org/yfR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcelo Perlin. Author, maintainer. Nic Crane. Reviewer.            Nic reviewed package (v. 0.0.5)                      rOpenSci, see <https://github.com/ropensci/software-review/issues/523> Alexander Fischer. Reviewer.            Alexander reviewed package (v. 0.0.5)                      rOpenSci, see <https://github.com/ropensci/software-review/issues/523>","code":""},{"path":"https://docs.ropensci.org/yfR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Perlin M (2023). yfR: Downloads Organizes Financial Data Yahoo Finance. R package version 1.1.0, https://github.com/ropensci/yfR.","code":"@Manual{,   title = {yfR: Downloads and Organizes Financial Data from Yahoo Finance},   author = {Marcelo Perlin},   year = {2023},   note = {R package version 1.1.0},   url = {https://github.com/ropensci/yfR}, }"},{"path":"https://docs.ropensci.org/yfR/index.html","id":"motivation","dir":"","previous_headings":"","what":"Downloads and Organizes Financial Data from Yahoo Finance","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"yfR facilitates importing stock prices Yahoo finance, organizing data tidy format speeding process using cache system parallel computing. yfR second backwards-incompatible version BatchGetSymbols, released 2016 (see vignette yfR BatchGetSymbols details). nutshell, Yahoo Finance (YF) provides vast repository stock price data around globe. covers significant number markets assets, used extensively academic research teaching. order import financial data YF, need ticker (id stock, e.g.¬†‚ÄúGM‚Äù General Motors) time period ‚Äì first last date.","code":""},{"path":"https://docs.ropensci.org/yfR/index.html","id":"the-data","dir":"","previous_headings":"","what":"The Data","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"main function package, yfR::yf_get, returns dataframe financial data. price data measured unit financial exchange. example, price data GM (NASDAQ/US) measured dollars, price data PETR3.SA (B3/BR) measured Reais (Brazilian currency). returned data contains following columns: ticker: requested tickers (ids stocks); ref_date: reference day (can also year/month/week using argument freq_data); price_open: opening price day/period; price_high: highest price day/period; price_close: close/last price day/period; volume: financial volume day/period, unit exchange; price_adjusted: stock price adjusted corporate events splits, dividends others ‚Äì usually want/need studying stocks represents real financial performance stockholders; ret_adjusted_prices: arithmetic log return (see input type_return) adjusted stock prices; ret_adjusted_prices: arithmetic log return (see input type_return) closing stock prices; cumret_adjusted_prices: accumulated arithmetic/log return period (starts 100%).","code":""},{"path":"https://docs.ropensci.org/yfR/index.html","id":"finding-tickers","dir":"","previous_headings":"","what":"Finding tickers","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"easiest way find tickers company stock search Yahoo Finance‚Äôs website. top page ‚Äôll find search bar: YF Search company can many different stocks traded different markets (see picture ). example shows, Petrobras traded NYQ (New York Exchange), SAO (Sao Paulo/Brazil - B3 exchange) BUE (Buenos Aires/Argentina Exchange), different symbols (tickers). market indices, list tickers available .","code":""},{"path":"https://docs.ropensci.org/yfR/index.html","id":"features-of-yfr","dir":"","previous_headings":"","what":"Features of yfR","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Fetches daily/weekly/monthly/annual stock prices/returns yahoo finance outputs dataframe (tibble) long format (stacked data); new feature called collections facilitates download multiple tickers particular market/index. can, example, download data stocks SP500 index simple call yf_collection_get(\"SP500\"); session-persistent smart cache system available default. means data saved locally missing portions downloaded, needed. dates compared benchmark ticker SP500 , whenever individual asset sufficient number dates, software drops output. means can choose ignore tickers high proportion missing dates. customized function called yf_convert_to_wide() can transform long dataframe wide format (tickers columns), much used portfolio optimization. output list element different target variable (prices, returns, volumes). Parallel computing package furrr available, speeding data importation process.","code":""},{"path":"https://docs.ropensci.org/yfR/index.html","id":"warnings","dir":"","previous_headings":"","what":"Warnings","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Yahoo finance data far perfect reliable, specially individual stocks. experience, using research code stock indices fine can match data sources. , adjusted stock prices individual assets messy stock events splits dividends properly registered. never able match data sources, specially long time periods lots corporate events. advice never use yahoo finance data individual stocks production (research papers academic documents ‚Äì thesis dissertations). adjusted price data individual stocks important research, use data sources EOD, SimFin Econom√°tica.","code":""},{"path":"https://docs.ropensci.org/yfR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"# CRAN (stable) install.packages('yfR')  # Github (dev version) devtools::install_github('ropensci/yfR')  # ropensci install.packages(\"yfR\", repos = \"https://ropensci.r-universe.dev\")"},{"path":"https://docs.ropensci.org/yfR/index.html","id":"a-simple-example-of-usage","dir":"","previous_headings":"","what":"A simple example of usage","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"","code":"library(yfR)  # set options for algorithm my_ticker <- 'META' first_date <- Sys.Date() - 30 last_date <- Sys.Date()  # fetch data df_yf <- yf_get(tickers = my_ticker,                       first_date = first_date,                      last_date = last_date) #>  #> ‚îÄ‚îÄ Running yfR for 1 stocks | 2023-01-17 --> 2023-02-16 (30 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/1) Fetching data for META #> !    - not cached #> ‚úî    - cache saved successfully #> ‚úî    - got 22 valid rows (2023-01-17 --> 2023-02-15) #> ‚úî    - got 100% of valid prices -- Time for some tea? #> ‚Ñπ Binding price data #>  #> ‚îÄ‚îÄ Diagnostics ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚úî Returned dataframe with 22 rows -- Youre doing good! #> ‚Ñπ Using 6.3 kB at /tmp/RtmpvCnCwr/yf_cache for 2 cache files #> ‚Ñπ Out of 1 requested tickers, you got 1 (100%)  # output is a tibble with data head(df_yf) #> # A tibble: 6 √ó 11 #>   ticker ref_date   price_open price_h‚Ä¶¬π price‚Ä¶¬≤ price‚Ä¶¬≥ volume price‚Ä¶‚Å¥ ret_ad‚Ä¶‚Åµ #>   <chr>  <date>          <dbl>     <dbl>   <dbl>   <dbl>  <dbl>   <dbl>    <dbl> #> 1 META   2023-01-17       136.      137.    134.    135. 2.11e7    135. NA       #> 2 META   2023-01-18       136.      137.    133.    133. 2.02e7    133. -1.73e-2 #> 3 META   2023-01-19       132.      137.    132.    136. 2.86e7    136.  2.35e-2 #> 4 META   2023-01-20       136.      140.    135.    139. 2.86e7    139.  2.37e-2 #> 5 META   2023-01-23       139.      144.    139.    143. 2.75e7    143.  2.80e-2 #> 6 META   2023-01-24       142.      145     141.    143. 2.20e7    143. -9.07e-4 #> # ‚Ä¶ with 2 more variables: ret_closing_prices <dbl>, #> #   cumret_adjusted_prices <dbl>, and abbreviated variable names ¬π‚Äãprice_high, #> #   ¬≤‚Äãprice_low, ¬≥‚Äãprice_close, ‚Å¥‚Äãprice_adjusted, ‚Åµ‚Äãret_adjusted_prices"},{"path":"https://docs.ropensci.org/yfR/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Downloads and Organizes Financial Data from Yahoo Finance","text":"Package yfR based quantmod (@joshuaulrich) uses one functions (quantmod::getSymbols) fetching raw data Yahoo Finance. API, significant work maintaining code. Joshua always fast openminded implemented required changes, ‚Äôm grateful .","code":""},{"path":"https://docs.ropensci.org/yfR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator ‚Äî %>%","title":"Pipe operator ‚Äî %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator ‚Äî %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/yfR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator ‚Äî %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator ‚Äî %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_cachefolder_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the default folder for caching ‚Äî yf_cachefolder_get","title":"Returns the default folder for caching ‚Äî yf_cachefolder_get","text":"default, yfR uses temp dir store files.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_cachefolder_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the default folder for caching ‚Äî yf_cachefolder_get","text":"","code":"yf_cachefolder_get()"},{"path":"https://docs.ropensci.org/yfR/reference/yf_cachefolder_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the default folder for caching ‚Äî yf_cachefolder_get","text":"path (string)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_cachefolder_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the default folder for caching ‚Äî yf_cachefolder_get","text":"","code":"print(yf_cachefolder_get()) #> [1] \"/tmp/Rtmpcj6kgi/yf_cache\""},{"path":"https://docs.ropensci.org/yfR/reference/yf_collection_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"function use set collection YF data, index components download data Yahoo Finance using yf_get.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_collection_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"","code":"yf_collection_get(   collection,   first_date = Sys.Date() - 30,   last_date = Sys.Date(),   do_parallel = FALSE,   do_cache = TRUE,   cache_folder = yf_cachefolder_get(),   ... )"},{"path":"https://docs.ropensci.org/yfR/reference/yf_collection_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"collection collection fetch data (e.g. \"SP500\", \"IBOV\", \"FTSE\" ). See function yf_get_available_collections finding available collections first_date first date query (Date character YYYY-MM-DD) last_date last date query (Date character YYYY-MM-DD) do_parallel Flag using parallel (default = FALSE). using parallel, make sure call function future::plan() first. See <https://furrr.futureverse.org/> details. do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_cachefolder_get() ) ... arguments passed yf_get","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_collection_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"data frame financial prices collection","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_collection_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads a collection of data from Yahoo Finance ‚Äî yf_collection_get","text":"","code":"# \\donttest{ df_yf <- yf_collection_get(collection = \"IBOV\",                            first_date = Sys.Date() - 30,                            last_date = Sys.Date() ) #>  #> ‚îÄ‚îÄ Fetching price collection for IBOV ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Error in df_ibov_comp[[1]] : subscript out of bounds #> ‚Ñπ Failed to import current composition for IBOV. Using fallback index #> ‚úî Using fallback IBOV composition from 2022-12-28 #>  #> ‚îÄ‚îÄ Running yfR for 88 stocks | 2024-02-20 --> 2024-03-21 (30 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^BVSP #> ‚Ñπ (1/88) Fetching data for ABEV3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (2/88) Fetching data for ALPA4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (3/88) Fetching data for AMER3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (4/88) Fetching data for ASAI3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (5/88) Fetching data for AZUL4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Boa! #> ‚Ñπ (6/88) Fetching data for B3SA3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Mas bah tche, que coisa linda! #> ‚Ñπ (7/88) Fetching data for BBAS3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (8/88) Fetching data for BBDC3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- All OK! #> ‚Ñπ (9/88) Fetching data for BBDC4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (10/88) Fetching data for BBSE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Mas bah tche, que coisa linda! #> ‚Ñπ (11/88) Fetching data for BEEF3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (12/88) Fetching data for BIDI11.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (13/88) Fetching data for BPAC11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- You got it ! #> ‚Ñπ (14/88) Fetching data for BPAN4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (15/88) Fetching data for BRAP4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (16/88) Fetching data for BRFS3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- You got it ! #> ‚Ñπ (17/88) Fetching data for BRKM5.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (18/88) Fetching data for BRML3.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (19/88) Fetching data for CASH3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (20/88) Fetching data for CCRO3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (21/88) Fetching data for CIEL3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (22/88) Fetching data for CMIG4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (23/88) Fetching data for COGN3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (24/88) Fetching data for CPFE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (25/88) Fetching data for CPLE6.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (26/88) Fetching data for CRFB3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (27/88) Fetching data for CSAN3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (28/88) Fetching data for CSNA3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- All OK! #> ‚Ñπ (29/88) Fetching data for CVCB3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (30/88) Fetching data for CYRE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ (31/88) Fetching data for DXCO3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (32/88) Fetching data for ECOR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (33/88) Fetching data for EGIE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (34/88) Fetching data for ELET3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (35/88) Fetching data for ELET6.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- You got it ! #> ‚Ñπ (36/88) Fetching data for EMBR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (37/88) Fetching data for ENBR3.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (38/88) Fetching data for ENEV3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (39/88) Fetching data for ENGI11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (40/88) Fetching data for EQTL3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (41/88) Fetching data for EZTC3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (42/88) Fetching data for FLRY3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ (43/88) Fetching data for GGBR4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- You got it ! #> ‚Ñπ (44/88) Fetching data for GOAU4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (45/88) Fetching data for GOLL4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ (46/88) Fetching data for HAPV3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (47/88) Fetching data for HYPE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (48/88) Fetching data for IGTI11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (49/88) Fetching data for IRBR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (50/88) Fetching data for ITSA4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (51/88) Fetching data for ITUB4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (52/88) Fetching data for JBSS3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (53/88) Fetching data for JHSF3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- All OK! #> ‚Ñπ (54/88) Fetching data for KLBN11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ (55/88) Fetching data for LCAM3.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (56/88) Fetching data for LREN3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (57/88) Fetching data for LWSA3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- All OK! #> ‚Ñπ (58/88) Fetching data for MGLU3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (59/88) Fetching data for MRFG3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (60/88) Fetching data for MRVE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (61/88) Fetching data for MULT3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (62/88) Fetching data for NTCO3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (63/88) Fetching data for PCAR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (64/88) Fetching data for PETR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (65/88) Fetching data for PETR4.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (66/88) Fetching data for PETZ3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (67/88) Fetching data for PRIO3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (68/88) Fetching data for QUAL3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (69/88) Fetching data for RADL3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (70/88) Fetching data for RAIL3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ (71/88) Fetching data for RDOR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (72/88) Fetching data for RENT3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (73/88) Fetching data for SANB11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ (74/88) Fetching data for SBSP3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Mais faceiro que guri de bombacha nova! #> ‚Ñπ (75/88) Fetching data for SOMA3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Got it! #> ‚Ñπ (76/88) Fetching data for SULA11.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (77/88) Fetching data for SUZB3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (78/88) Fetching data for TAEE11.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (79/88) Fetching data for TIMS3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Mais faceiro que guri de bombacha nova! #> ‚Ñπ (80/88) Fetching data for TOTS3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good stuff! #> ‚Ñπ (81/88) Fetching data for UGPA3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Parabens , tudo certo! #> ‚Ñπ (82/88) Fetching data for USIM5.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Looking good! #> ‚Ñπ (83/88) Fetching data for VALE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (84/88) Fetching data for VBBR3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- You got it ! #> ‚Ñπ (85/88) Fetching data for VIIA3.SA #> ! \t- not cached #> ‚úñ \t- error in download.. #> ‚Ñπ (86/88) Fetching data for VIVT3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Time for some tea? #> ‚Ñπ (87/88) Fetching data for WEGE3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Nice! #> ‚Ñπ (88/88) Fetching data for YDUQ3.SA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Youre doing good! #> ‚Ñπ Binding price data #>  #> ‚îÄ‚îÄ Diagnostics ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚úî Returned dataframe with 1804 rows -- Good stuff! #> ‚Ñπ Using 273.9 kB at /tmp/Rtmpcj6kgi/yf_cache for 83 cache files #> ‚Ñπ Out of 88 requested tickers, you got 82 (93%) # }"},{"path":"https://docs.ropensci.org/yfR/reference/yf_convert_to_wide.html","id":null,"dir":"Reference","previous_headings":"","what":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","title":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","text":"Transforms long (stacked) data frame list wide data frames","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_convert_to_wide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","text":"","code":"yf_convert_to_wide(df_in)"},{"path":"https://docs.ropensci.org/yfR/reference/yf_convert_to_wide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","text":"df_in dataframe long format (probably output yf_get())","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_convert_to_wide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","text":"list dataframes wide format (element   different column)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_convert_to_wide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transforms a long (stacked) data frame into a list of wide data frames ‚Äî yf_convert_to_wide","text":"","code":"my_f <- system.file(\"extdata/example_data_yfR.rds\", package = \"yfR\") df_tickers <- readRDS(my_f)  print(df_tickers) #> # A tibble: 1,077 √ó 10 #>    ticker ref_date   price_open price_high price_low price_close price_adjusted #>  * <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>          <dbl> #>  1 ^BVSP  2020-01-02     115652     118573    115649      118573         118573 #>  2 ^BVSP  2020-01-03     118564     118792    117341      117707         117707 #>  3 ^BVSP  2020-01-06     117707     117707    116269      116878         116878 #>  4 ^BVSP  2020-01-07     116872     117076    115965      116662         116662 #>  5 ^BVSP  2020-01-08     116667     117335    115693      116247         116247 #>  6 ^BVSP  2020-01-09     116248     116820    115411      115947         115947 #>  7 ^BVSP  2020-01-10     115948     116745    114952      115503         115503 #>  8 ^BVSP  2020-01-13     115503     117333    115503      117325         117325 #>  9 ^BVSP  2020-01-14     117325     117705    116610      117632         117632 #> 10 ^BVSP  2020-01-15     117632     117632    116188      116414         116414 #> # ‚Ñπ 1,067 more rows #> # ‚Ñπ 3 more variables: volume <dbl>, ret_adjusted_prices <dbl>, #> #   ret_closing_prices <dbl>  l_wide <- yf_convert_to_wide(df_tickers) l_wide #> $price_open #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  115652  207.  178. #>  2 2020-01-03  118564  207.  177. #>  3 2020-01-06  117707  207.  177. #>  4 2020-01-07  116872  213.  178. #>  5 2020-01-08  116667  213   178  #>  6 2020-01-09  116248  218.  182. #>  7 2020-01-10  115948  219.  182. #>  8 2020-01-13  115503  220.  181. #>  9 2020-01-14  117325  222.  181. #> 10 2020-01-15  117632  221.  181. #> # ‚Ñπ 359 more rows #>  #> $price_high #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  180. #>  2 2020-01-03  118792  210.  179. #>  3 2020-01-06  117707  213.  179. #>  4 2020-01-07  117076  215.  179. #>  5 2020-01-08  117335  216.  182. #>  6 2020-01-09  116820  218.  182. #>  7 2020-01-10  116745  220.  182. #>  8 2020-01-13  117333  222.  182. #>  9 2020-01-14  117705  222.  183. #> 10 2020-01-15  117632  222.  182. #> # ‚Ñπ 359 more rows #>  #> $price_low #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  115649  206.  177. #>  2 2020-01-03  117341  207.  176. #>  3 2020-01-06  116269  207.  176. #>  4 2020-01-07  115965  212.  177. #>  5 2020-01-08  115693  213.  178. #>  6 2020-01-09  115411  216.  180. #>  7 2020-01-10  114952  217.  180. #>  8 2020-01-13  115503  219.  180. #>  9 2020-01-14  116610  219.  180. #> 10 2020-01-15  116188  220.  179. #> # ‚Ñπ 359 more rows #>  #> $price_close #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  180  #>  2 2020-01-03  117707  209.  178. #>  3 2020-01-06  116878  213.  179. #>  4 2020-01-07  116662  213.  178. #>  5 2020-01-08  116247  215.  181. #>  6 2020-01-09  115947  218.  181. #>  7 2020-01-10  115503  218.  180. #>  8 2020-01-13  117325  222.  181. #>  9 2020-01-14  117632  219.  181. #> 10 2020-01-15  116414  221.  180. #> # ‚Ñπ 359 more rows #>  #> $price_adjusted #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`    FB   MMM #>    <date>       <dbl> <dbl> <dbl> #>  1 2020-01-02  118573  210.  171. #>  2 2020-01-03  117707  209.  169. #>  3 2020-01-06  116878  213.  170. #>  4 2020-01-07  116662  213.  169. #>  5 2020-01-08  116247  215.  171. #>  6 2020-01-09  115947  218.  172. #>  7 2020-01-10  115503  218.  171. #>  8 2020-01-13  117325  222.  172. #>  9 2020-01-14  117632  219.  172. #> 10 2020-01-15  116414  221.  171. #> # ‚Ñπ 359 more rows #>  #> $volume #> # A tibble: 369 √ó 4 #>    ref_date   `^BVSP`       FB     MMM #>    <date>       <dbl>    <dbl>   <dbl> #>  1 2020-01-02 5162700 12077100 3601700 #>  2 2020-01-03 6834500 11188400 2466900 #>  3 2020-01-06 6570000 17058900 1998000 #>  4 2020-01-07 4854100 14912400 2173000 #>  5 2020-01-08 5910500 13475000 2758300 #>  6 2020-01-09 5953500 12642800 2746300 #>  7 2020-01-10 4783400 12119400 2103800 #>  8 2020-01-13 5685100 14463400 2090800 #>  9 2020-01-14 5361700 13288900 2911200 #> 10 2020-01-15 5569400 10036500 2482200 #> # ‚Ñπ 359 more rows #>  #> $ret_adjusted_prices #> # A tibble: 369 √ó 4 #>    ref_date    `^BVSP`       FB       MMM #>    <date>        <dbl>    <dbl>     <dbl> #>  1 2020-01-02 NA       NA       NA        #>  2 2020-01-03 -0.00730 -0.00529 -0.00861  #>  3 2020-01-06 -0.00704  0.0188   0.000953 #>  4 2020-01-07 -0.00185  0.00216 -0.00403  #>  5 2020-01-08 -0.00356  0.0101   0.0153   #>  6 2020-01-09 -0.00258  0.0143   0.00316  #>  7 2020-01-10 -0.00383 -0.00110 -0.00403  #>  8 2020-01-13  0.0158   0.0177   0.00249  #>  9 2020-01-14  0.00262 -0.0128   0.00249  #> 10 2020-01-15 -0.0104   0.00954 -0.00877  #> # ‚Ñπ 359 more rows #>  #> $ret_closing_prices #> # A tibble: 369 √ó 4 #>    ref_date    `^BVSP`       FB       MMM #>    <date>        <dbl>    <dbl>     <dbl> #>  1 2020-01-02 NA       NA       NA        #>  2 2020-01-03 -0.00730 -0.00529 -0.00861  #>  3 2020-01-06 -0.00704  0.0188   0.000953 #>  4 2020-01-07 -0.00185  0.00216 -0.00403  #>  5 2020-01-08 -0.00356  0.0101   0.0153   #>  6 2020-01-09 -0.00258  0.0143   0.00316  #>  7 2020-01-10 -0.00383 -0.00110 -0.00403  #>  8 2020-01-13  0.0158   0.0177   0.00249  #>  9 2020-01-14  0.00262 -0.0128   0.00249  #> 10 2020-01-15 -0.0104   0.00954 -0.00877  #> # ‚Ñπ 359 more rows #>"},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Download financial data from Yahoo Finance ‚Äî yf_get","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"Based ticker (id stock) time period, function download stock price data Yahoo Finance organizes long format. Yahoo Finance <https://finance.yahoo.com/> provides vast repository stock price data around globe. cover significant number markets assets, used extensively academic research teaching. website can lookup ticker company.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"","code":"yf_get(   tickers,   first_date = Sys.Date() - 30,   last_date = Sys.Date(),   thresh_bad_data = 0.75,   bench_ticker = \"^GSPC\",   type_return = \"arit\",   freq_data = \"daily\",   how_to_aggregate = \"last\",   do_complete_data = FALSE,   do_cache = TRUE,   cache_folder = yf_cachefolder_get(),   do_parallel = FALSE,   be_quiet = FALSE )"},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"tickers single vector tickers. sure whether ticker available, search YF <https://finance.yahoo.com/>. first_date first date query (Date character YYYY-MM-DD) last_date last date query (Date character YYYY-MM-DD) thresh_bad_data percentage threshold defining bad data. dates benchmark ticker compared asset. percentage non-missing dates respect benchmark ticker lower thresh_bad_data, function ignore asset (default = 0.75) bench_ticker ticker benchmark asset used compare dates. suggestion use main stock index market data coming (default = ^GSPC (SP500, US market)) type_return Type price return calculate: 'arit' - arithmetic (default), 'log' - log returns. freq_data Frequency financial data: 'daily' (default), 'weekly', 'monthly', 'yearly' how_to_aggregate Defines whether aggregate data using first observations aggregating period last ('first', 'last').  example, freq_data = 'yearly' how_to_aggregate = 'last',  last available day year used  aggregated values price_adjusted. (Default = \"last\") do_complete_data Return complete/balanced dataset? TRUE, missing pairs ticker-date replaced NA closest price (see input do_fill_missing_prices). Default = FALSE. do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_cachefolder_get() ) do_parallel Flag using parallel (default = FALSE). using parallel, make sure call function future::plan() first. See <https://furrr.futureverse.org/> details. be_quiet Flag printing statements (default = FALSE)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"dataframe financial data working days, markets open. price data measured unit financial exchange. example, price data META (NYSE/US) measures dollars, price data PETR3.SA (B3/BR) measured Reais (Brazilian currency). return dataframe contains following columns: ticker requested tickers (ids stocks) ref_date reference day (can also year/month/week   using argument freq_data) price_open opening price day/period price_high highest price day/period price_close close/last price day/period volume financial volume day/period price_adjusted stock price adjusted corporate events   splits, dividends others -- usually want/need   studying stocks represents actual financial performance   stockholders ret_adjusted_prices arithmetic log return (see input type_return)   adjusted stock prices ret_adjusted_prices arithmetic log return (see input type_return)   closing stock prices cumret_adjusted_prices accumulated arithmetic/log return period (starts 100%)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"the-cache-system","dir":"Reference","previous_headings":"","what":"The cache system","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"yfR`s cache system basically bunch rds files saved every time data imported YF. indexes data ticker time period. Whenever user asks dataset, first checks ticker/time period exists cache , , loads data rds file. default, temporary folder used (see function yf_cachefolder_get, means cache files session-persistent. practice, whenever restart R/RStudio session, cache files lost. choice made due fact merging adjusted stock price data corporate events (dividends/splits) mess prone errors. happens stock price data, indices data. really need persistent cache folder, Ok indices data,  simply set path argument cache_folder (see warning section).","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"aware using cache system local folder (default  tempdir()), aggregate prices series might match split dividends event happens cache files.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download financial data from Yahoo Finance ‚Äî yf_get","text":"","code":"# \\donttest{ tickers <- c(\"TSLA\", \"MMM\")  first_date <- Sys.Date() - 30 last_date <- Sys.Date()  df_yf <- yf_get(   tickers = tickers,   first_date = first_date,   last_date = last_date ) #>  #> ‚îÄ‚îÄ Running yfR for 2 stocks | 2024-02-20 --> 2024-03-21 (30 days) ‚îÄ‚îÄ #>  #> ‚Ñπ Downloading data for benchmark ticker ^GSPC #> ‚Ñπ (1/2) Fetching data for MMM #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Well done ! #> ‚Ñπ (2/2) Fetching data for TSLA #> ! \t- not cached #> ‚úî \t- cache saved successfully #> ‚úî \t- got 22 valid rows (2024-02-20 --> 2024-03-20) #> ‚úî \t- got 100% of valid prices -- Good job ! #> ‚Ñπ Binding price data #>  #> ‚îÄ‚îÄ Diagnostics ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> ‚úî Returned dataframe with 44 rows -- All OK! #> ‚Ñπ Using 283.2 kB at /tmp/Rtmpcj6kgi/yf_cache for 86 cache files #> ‚Ñπ Out of 2 requested tickers, you got 2 (100%)  print(df_yf) #> # A tibble: 44 √ó 11 #>    ticker ref_date   price_open price_high price_low price_close  volume #>  * <chr>  <date>          <dbl>      <dbl>     <dbl>       <dbl>   <dbl> #>  1 MMM    2024-02-20       91.1       92.5      90.5        91.8 4326600 #>  2 MMM    2024-02-21       91.6       92.0      91.0        91.7 3399300 #>  3 MMM    2024-02-22       91.6       92.4      91.1        92.2 4250700 #>  4 MMM    2024-02-23       92.4       92.9      91.9        92.6 3155700 #>  5 MMM    2024-02-26       92.2       92.5      91.4        91.8 3272900 #>  6 MMM    2024-02-27       92         92.3      91.5        92.3 2288300 #>  7 MMM    2024-02-28       92         92.6      91.4        91.5 2962400 #>  8 MMM    2024-02-29       92         92.3      91.4        92.1 5158400 #>  9 MMM    2024-03-01       92.0       92.0      90.9        91.9 3396100 #> 10 MMM    2024-03-04       91.1       91.8      90.5        91.4 5584200 #> # ‚Ñπ 34 more rows #> # ‚Ñπ 4 more variables: price_adjusted <dbl>, ret_adjusted_prices <dbl>, #> #   ret_closing_prices <dbl>, cumret_adjusted_prices <dbl> # }"},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_available_collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns available collections ‚Äî yf_get_available_collections","title":"Returns available collections ‚Äî yf_get_available_collections","text":"Returns available collections","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_available_collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns available collections ‚Äî yf_get_available_collections","text":"","code":"yf_get_available_collections(print_description = FALSE)"},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_available_collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns available collections ‚Äî yf_get_available_collections","text":"print_description Logical (TRUE/FALSE) - flag printing description available indices/collections","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_available_collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns available collections ‚Äî yf_get_available_collections","text":"string vector available collections","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_available_collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns available collections ‚Äî yf_get_available_collections","text":"","code":"print(yf_get_available_collections()) #> [1] \"SP500\"               \"IBOV\"                \"FTSE\"                #> [4] \"DOW\"                 \"testthat-collection\""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_dividends.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","title":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","text":"function use json api retrieve dividends Yahoo finance.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_dividends.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","text":"","code":"yf_get_dividends(ticker, first_date = Sys.Date() - 365, last_date = Sys.Date())"},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_dividends.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","text":"ticker single ticker symbol first_date first date query (Date character YYYY-MM-DD) last_date last date query (Date character YYYY-MM-DD)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_dividends.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","text":"tibble dividends","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_get_dividends.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Yahoo Finance Dividends from a single stock ‚Äî yf_get_dividends","text":"","code":"yf_get_dividends(ticker = \"PETR4.SA\") #> ‚Ñπ Be aware that YF does not provide a consistent dividend database. Use this function with caution. #> # A tibble: 4 √ó 3 #>   ref_date   ticker   dividend #>   <date>     <chr>       <dbl> #> 1 2023-04-28 PETR4.SA     2.93 #> 2 2023-06-13 PETR4.SA     1.89 #> 3 2023-08-22 PETR4.SA     1.15 #> 4 2023-11-22 PETR4.SA     1.36"},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_composition.html","id":null,"dir":"Reference","previous_headings":"","what":"Get current composition of stock indices ‚Äî yf_index_composition","title":"Get current composition of stock indices ‚Äî yf_index_composition","text":"Get current composition stock indices","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_composition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get current composition of stock indices ‚Äî yf_index_composition","text":"","code":"yf_index_composition(   mkt_index,   do_cache = TRUE,   cache_folder = yf_cachefolder_get(),   force_fallback = FALSE )"},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_composition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get current composition of stock indices ‚Äî yf_index_composition","text":"mkt_index index (e.g. IBOV, SP500, FTSE) do_cache Use cache system? (default = TRUE) cache_folder save cache files? (default = yfR::yf_cachefolder_get() ) force_fallback Logical (TRUE/FALSE). Forces function use fallback system","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_composition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get current composition of stock indices ‚Äî yf_index_composition","text":"dataframe index composition (column might vary)","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_composition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get current composition of stock indices ‚Äî yf_index_composition","text":"","code":"df_sp500 <- yf_index_composition(\"SP500\") #> ‚úî Got SP500 composition with 503 rows"},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get available indices in package ‚Äî yf_index_list","title":"Get available indices in package ‚Äî yf_index_list","text":"function return available market indices registered package.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get available indices in package ‚Äî yf_index_list","text":"","code":"yf_index_list(print_description = FALSE)"},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get available indices in package ‚Äî yf_index_list","text":"print_description Logical (TRUE/FALSE) - flag printing description available indices/collections","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get available indices in package ‚Äî yf_index_list","text":"vector mkt indices","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_index_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get available indices in package ‚Äî yf_index_list","text":"","code":"indices <- yf_index_list() indices #> [1] \"SP500\"               \"IBOV\"                \"FTSE\"                #> [4] \"DOW\"                 \"testthat-collection\""},{"path":"https://docs.ropensci.org/yfR/reference/yf_live_prices.html","id":null,"dir":"Reference","previous_headings":"","what":"Yahoo Finance Live Prices ‚Äî yf_live_prices","title":"Yahoo Finance Live Prices ‚Äî yf_live_prices","text":"function use json api retrieve live prices Yahoo finance.","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_live_prices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Yahoo Finance Live Prices ‚Äî yf_live_prices","text":"","code":"yf_live_prices(ticker)"},{"path":"https://docs.ropensci.org/yfR/reference/yf_live_prices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Yahoo Finance Live Prices ‚Äî yf_live_prices","text":"ticker single ticker symbol","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_live_prices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Yahoo Finance Live Prices ‚Äî yf_live_prices","text":"tibble live prices","code":""},{"path":"https://docs.ropensci.org/yfR/reference/yf_live_prices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Yahoo Finance Live Prices ‚Äî yf_live_prices","text":"","code":"yfR::yf_live_prices(\"PETR4.SA\") #> # A tibble: 1 √ó 5 #>   ticker   time_stamp          price last_price daily_change #>   <chr>    <dttm>              <dbl>      <dbl>        <dbl> #> 1 PETR4.SA 2024-03-20 20:07:50  36.7       36.1       0.0175"},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-110-2023-01-30--major-version","dir":"Changelog","previous_headings":"","what":"Version 1.1.0 (2023-01-30) ‚Äì major version","title":"Version 1.1.0 (2023-01-30) ‚Äì major version","text":"CRAN release: 2023-02-16 new function yf_live_prices() (see pr) new function fetching dividends (see PR) Thank Henrique work , live prices dividends!","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-106-2023-01-06--bug-fixes-and-cran-submission","dir":"Changelog","previous_headings":"","what":"Version 1.0.6 (2023-01-06) ‚Äì bug fixes and CRAN submission","title":"Version 1.0.6 (2023-01-06) ‚Äì bug fixes and CRAN submission","text":"CRAN release: 2023-01-06 fix user requesting one trading day. Now gives warning error ‚Äì fixes #23 added new market index DOW (^DJI) now using roxygen version 7.2.3","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-105-2022-11-23--bug-fixes","dir":"Changelog","previous_headings":"","what":"Version 1.0.5 (2022-11-23) ‚Äì bug fixes","title":"Version 1.0.5 (2022-11-23) ‚Äì bug fixes","text":"now using tidyselect::all_of() (fixes issue #22)","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-104-2022-11-15--bug-fixes","dir":"Changelog","previous_headings":"","what":"Version 1.0.4 (2022-11-15) ‚Äì bug fixes","title":"Version 1.0.4 (2022-11-15) ‚Äì bug fixes","text":"CRAN release: 2022-11-18 switched curl::has_internet pingr::is_online() ‚Äì first doesn‚Äôt seem work restricted networks. Fixes #20 fix user requesting one trading day ‚Äì fixes #19","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-103-2022-10-20--bug-fixes","dir":"Changelog","previous_headings":"","what":"Version 1.0.3 (2022-10-20) ‚Äì bug fixes","title":"Version 1.0.3 (2022-10-20) ‚Äì bug fixes","text":"CRAN release: 2022-10-31 fixed bug number files cache folder","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-102-2022-08-21--bug-fixes","dir":"Changelog","previous_headings":"","what":"Version 1.0.2 (2022-08-21) ‚Äì bug fixes","title":"Version 1.0.2 (2022-08-21) ‚Äì bug fixes","text":"CRAN release: 2022-08-27 changed FB ticker META fixed bug calculation log accumulated returns fixed bug order tickers (now makes sure ticker symbol sorted)","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-101-2022-08-15--bug-fixes","dir":"Changelog","previous_headings":"","what":"Version 1.0.1 (2022-08-15) ‚Äì bug fixes","title":"Version 1.0.1 (2022-08-15) ‚Äì bug fixes","text":"CRAN release: 2022-08-15 fixed bug FB ticker (change TSLA)","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-100-2022-06-22--cran-submission","dir":"Changelog","previous_headings":"","what":"Version 1.0.0 (2022-06-22) ‚Äì CRAN SUBMISSION","title":"Version 1.0.0 (2022-06-22) ‚Äì CRAN SUBMISSION","text":"CRAN release: 2022-06-30 many pkg changes ropensci approval github repo now https://github.com/ropensci/yfR changed (suggested CRAN team) used n_cores = 2 (suggested CRAN)","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-005-2022-06-07","dir":"Changelog","previous_headings":"","what":"Version 0.0.5 (2022-06-07)","title":"Version 0.0.5 (2022-06-07)","text":"Many changes ropensci","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-003-2022-05-03","dir":"Changelog","previous_headings":"","what":"Version 0.0.3 (2022-05-03)","title":"Version 0.0.3 (2022-05-03)","text":"Added cumulative return output","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-002-2022-05-02","dir":"Changelog","previous_headings":"","what":"Version 0.0.2 (2022-05-02)","title":"Version 0.0.2 (2022-05-02)","text":"Added warning message parallel option (yahoo finance just set api limit) Fixed typos readme.md","code":""},{"path":"https://docs.ropensci.org/yfR/news/index.html","id":"version-001-2022-03-28","dir":"Changelog","previous_headings":"","what":"Version 0.0.1 (2022-03-28)","title":"Version 0.0.1 (2022-03-28)","text":"First version, ported BatchGetSymbols","code":""}]
